AOIU_1:25:CreateConnection(int):id => -id
AOIU_2:37:DestroyConnection(int):id => -id
AOIU_3:49:Connect(int):id => -id
AOIU_4:61:Disconnect(int):id => -id
AOIU_5:73:Subscribe(int):id => -id
AOIU_6:85:SubscribeCallback(int):id => -id
AOIU_7:97:Unsubscribe(int):id => -id
AOIU_8:109:UnsubscribeCallback(int):id => -id
AOIU_9:123:Publish(int,java.lang.String):id => -id
AOIU_10:136:GetMessage(int):id => -id
AOIS_1:25:CreateConnection(int):id => ++id
AOIS_2:25:CreateConnection(int):id => --id
AOIS_3:25:CreateConnection(int):id => id++
AOIS_4:25:CreateConnection(int):id => id--
AOIS_5:37:DestroyConnection(int):id => ++id
AOIS_6:37:DestroyConnection(int):id => --id
AOIS_7:37:DestroyConnection(int):id => id++
AOIS_8:37:DestroyConnection(int):id => id--
AOIS_9:49:Connect(int):id => ++id
AOIS_10:49:Connect(int):id => --id
AOIS_11:49:Connect(int):id => id++
AOIS_12:49:Connect(int):id => id--
AOIS_13:61:Disconnect(int):id => ++id
AOIS_14:61:Disconnect(int):id => --id
AOIS_15:61:Disconnect(int):id => id++
AOIS_16:61:Disconnect(int):id => id--
AOIS_17:73:Subscribe(int):id => ++id
AOIS_18:73:Subscribe(int):id => --id
AOIS_19:73:Subscribe(int):id => id++
AOIS_20:73:Subscribe(int):id => id--
AOIS_21:85:SubscribeCallback(int):id => ++id
AOIS_22:85:SubscribeCallback(int):id => --id
AOIS_23:85:SubscribeCallback(int):id => id++
AOIS_24:85:SubscribeCallback(int):id => id--
AOIS_25:97:Unsubscribe(int):id => ++id
AOIS_26:97:Unsubscribe(int):id => --id
AOIS_27:97:Unsubscribe(int):id => id++
AOIS_28:97:Unsubscribe(int):id => id--
AOIS_29:109:UnsubscribeCallback(int):id => ++id
AOIS_30:109:UnsubscribeCallback(int):id => --id
AOIS_31:109:UnsubscribeCallback(int):id => id++
AOIS_32:109:UnsubscribeCallback(int):id => id--
AOIS_33:123:Publish(int,java.lang.String):id => ++id
AOIS_34:123:Publish(int,java.lang.String):id => --id
AOIS_35:123:Publish(int,java.lang.String):id => id++
AOIS_36:123:Publish(int,java.lang.String):id => id--
AOIS_37:136:GetMessage(int):id => ++id
AOIS_38:136:GetMessage(int):id => --id
AOIS_39:136:GetMessage(int):id => id++
AOIS_40:136:GetMessage(int):id => id--
AOIS_41:218:void_onReceive(java.lang.Object):callbacks => ++callbacks
AOIS_42:218:void_onReceive(java.lang.Object):callbacks => --callbacks
AOIS_43:218:void_onReceive(java.lang.Object):callbacks => callbacks++
AOIS_44:218:void_onReceive(java.lang.Object):callbacks => callbacks--
AOIS_45:222:void_onReceive(java.lang.Object):callbacks => ++callbacks
AOIS_46:222:void_onReceive(java.lang.Object):callbacks => --callbacks
AOIS_47:222:void_onReceive(java.lang.Object):callbacks => callbacks++
AOIS_48:222:void_onReceive(java.lang.Object):callbacks => callbacks--
AOIS_49:227:void_onReceive(java.lang.Object):callbacks => ++callbacks
AOIS_50:227:void_onReceive(java.lang.Object):callbacks => --callbacks
AOIS_51:227:void_onReceive(java.lang.Object):callbacks => callbacks++
AOIS_52:227:void_onReceive(java.lang.Object):callbacks => callbacks--
AOIS_53:232:void_onReceive(java.lang.Object):callbacks => ++callbacks
AOIS_54:232:void_onReceive(java.lang.Object):callbacks => --callbacks
AOIS_55:232:void_onReceive(java.lang.Object):callbacks => callbacks++
AOIS_56:232:void_onReceive(java.lang.Object):callbacks => callbacks--
ROR_1:218:void_onReceive(java.lang.Object): callbacks < 10  =>   callbacks > 10
ROR_2:218:void_onReceive(java.lang.Object): callbacks < 10  =>   callbacks >= 10
ROR_3:218:void_onReceive(java.lang.Object): callbacks < 10  =>   callbacks <= 10
ROR_4:218:void_onReceive(java.lang.Object): callbacks < 10  =>   callbacks == 10
ROR_5:218:void_onReceive(java.lang.Object): callbacks < 10  =>   callbacks != 10
ROR_6:218:void_onReceive(java.lang.Object): callbacks < 10  =>   true
ROR_7:218:void_onReceive(java.lang.Object): callbacks < 10  =>   false
ROR_8:222:void_onReceive(java.lang.Object): callbacks > 0  =>   callbacks >= 0
ROR_9:222:void_onReceive(java.lang.Object): callbacks > 0  =>   callbacks < 0
ROR_10:222:void_onReceive(java.lang.Object): callbacks > 0  =>   callbacks <= 0
ROR_11:222:void_onReceive(java.lang.Object): callbacks > 0  =>   callbacks == 0
ROR_12:222:void_onReceive(java.lang.Object): callbacks > 0  =>   callbacks != 0
ROR_13:222:void_onReceive(java.lang.Object): callbacks > 0  =>   true
ROR_14:222:void_onReceive(java.lang.Object): callbacks > 0  =>   false
ROR_15:227:void_onReceive(java.lang.Object): callbacks > 0  =>   callbacks >= 0
ROR_16:227:void_onReceive(java.lang.Object): callbacks > 0  =>   callbacks < 0
ROR_17:227:void_onReceive(java.lang.Object): callbacks > 0  =>   callbacks <= 0
ROR_18:227:void_onReceive(java.lang.Object): callbacks > 0  =>   callbacks == 0
ROR_19:227:void_onReceive(java.lang.Object): callbacks > 0  =>   callbacks != 0
ROR_20:227:void_onReceive(java.lang.Object): callbacks > 0  =>   true
ROR_21:227:void_onReceive(java.lang.Object): callbacks > 0  =>   false
ROR_22:232:void_onReceive(java.lang.Object): callbacks > 0  =>   callbacks >= 0
ROR_23:232:void_onReceive(java.lang.Object): callbacks > 0  =>   callbacks < 0
ROR_24:232:void_onReceive(java.lang.Object): callbacks > 0  =>   callbacks <= 0
ROR_25:232:void_onReceive(java.lang.Object): callbacks > 0  =>   callbacks == 0
ROR_26:232:void_onReceive(java.lang.Object): callbacks > 0  =>   callbacks != 0
ROR_27:232:void_onReceive(java.lang.Object): callbacks > 0  =>   true
ROR_28:232:void_onReceive(java.lang.Object): callbacks > 0  =>   false
ROR_29:237:void_onReceive(java.lang.Object): messages.size() > 0  =>   messages.size() >= 0
ROR_30:237:void_onReceive(java.lang.Object): messages.size() > 0  =>   messages.size() < 0
ROR_31:237:void_onReceive(java.lang.Object): messages.size() > 0  =>   messages.size() <= 0
ROR_32:237:void_onReceive(java.lang.Object): messages.size() > 0  =>   messages.size() == 0
ROR_33:237:void_onReceive(java.lang.Object): messages.size() > 0  =>   messages.size() != 0
ROR_34:237:void_onReceive(java.lang.Object): messages.size() > 0  =>   true
ROR_35:237:void_onReceive(java.lang.Object): messages.size() > 0  =>   false
COR_1:203:void_onReceive(java.lang.Object): connectionObjectExists && !connected  =>   connectionObjectExists || !connected
COR_2:203:void_onReceive(java.lang.Object): connectionObjectExists && !connected  =>   connectionObjectExists ^ !connected
COR_3:210:void_onReceive(java.lang.Object): message instanceof JBus.Disconnect && connected  =>   message instanceof JBus.Disconnect || connected
COR_4:210:void_onReceive(java.lang.Object): message instanceof JBus.Disconnect && connected  =>   message instanceof JBus.Disconnect ^ connected
COR_5:214:void_onReceive(java.lang.Object): message instanceof JBus.Subscribe && connected  =>   message instanceof JBus.Subscribe || connected
COR_6:214:void_onReceive(java.lang.Object): message instanceof JBus.Subscribe && connected  =>   message instanceof JBus.Subscribe ^ connected
COR_7:214:void_onReceive(java.lang.Object): message instanceof JBus.Subscribe && connected && !subscribed  =>   message instanceof JBus.Subscribe && connected || !subscribed
COR_8:214:void_onReceive(java.lang.Object): message instanceof JBus.Subscribe && connected && !subscribed  =>   (message instanceof JBus.Subscribe && connected) ^ !subscribed
COR_9:218:void_onReceive(java.lang.Object): message instanceof JBus.SubscribeCallback && connected  =>   message instanceof JBus.SubscribeCallback || connected
COR_10:218:void_onReceive(java.lang.Object): message instanceof JBus.SubscribeCallback && connected  =>   message instanceof JBus.SubscribeCallback ^ connected
COR_11:218:void_onReceive(java.lang.Object): message instanceof JBus.SubscribeCallback && connected && callbacks < 10  =>   message instanceof JBus.SubscribeCallback && connected || callbacks < 10
COR_12:218:void_onReceive(java.lang.Object): message instanceof JBus.SubscribeCallback && connected && callbacks < 10  =>   (message instanceof JBus.SubscribeCallback && connected) ^ callbacks < 10
COR_13:222:void_onReceive(java.lang.Object): message instanceof JBus.Unsubscribe && connected  =>   message instanceof JBus.Unsubscribe || connected
COR_14:222:void_onReceive(java.lang.Object): message instanceof JBus.Unsubscribe && connected  =>   message instanceof JBus.Unsubscribe ^ connected
COR_15:222:void_onReceive(java.lang.Object): subscribed || callbacks > 0  =>   subscribed && callbacks > 0
COR_16:222:void_onReceive(java.lang.Object): subscribed || callbacks > 0  =>   subscribed ^ callbacks > 0
COR_17:222:void_onReceive(java.lang.Object): message instanceof JBus.Unsubscribe && connected && (subscribed || callbacks > 0)  =>   message instanceof JBus.Unsubscribe && connected || (subscribed || callbacks > 0)
COR_18:222:void_onReceive(java.lang.Object): message instanceof JBus.Unsubscribe && connected && (subscribed || callbacks > 0)  =>   (message instanceof JBus.Unsubscribe && connected) ^ (subscribed || callbacks > 0)
COR_19:227:void_onReceive(java.lang.Object): message instanceof JBus.UnsubscribeCallback && connected  =>   message instanceof JBus.UnsubscribeCallback || connected
COR_20:227:void_onReceive(java.lang.Object): message instanceof JBus.UnsubscribeCallback && connected  =>   message instanceof JBus.UnsubscribeCallback ^ connected
COR_21:227:void_onReceive(java.lang.Object): subscribed || callbacks > 0  =>   subscribed && callbacks > 0
COR_22:227:void_onReceive(java.lang.Object): subscribed || callbacks > 0  =>   subscribed ^ callbacks > 0
COR_23:227:void_onReceive(java.lang.Object): message instanceof JBus.UnsubscribeCallback && connected && (subscribed || callbacks > 0)  =>   message instanceof JBus.UnsubscribeCallback && connected || (subscribed || callbacks > 0)
COR_24:227:void_onReceive(java.lang.Object): message instanceof JBus.UnsubscribeCallback && connected && (subscribed || callbacks > 0)  =>   (message instanceof JBus.UnsubscribeCallback && connected) ^ (subscribed || callbacks > 0)
COR_25:231:void_onReceive(java.lang.Object): message instanceof JBus.Publish && connected  =>   message instanceof JBus.Publish || connected
COR_26:231:void_onReceive(java.lang.Object): message instanceof JBus.Publish && connected  =>   message instanceof JBus.Publish ^ connected
COR_27:232:void_onReceive(java.lang.Object): subscribed || callbacks > 0  =>   subscribed && callbacks > 0
COR_28:232:void_onReceive(java.lang.Object): subscribed || callbacks > 0  =>   subscribed ^ callbacks > 0
COR_29:237:void_onReceive(java.lang.Object): message instanceof JBus.GetMessage && connected  =>   message instanceof JBus.GetMessage || connected
COR_30:237:void_onReceive(java.lang.Object): message instanceof JBus.GetMessage && connected  =>   message instanceof JBus.GetMessage ^ connected
COR_31:237:void_onReceive(java.lang.Object): message instanceof JBus.GetMessage && connected && messages.size() > 0  =>   message instanceof JBus.GetMessage && connected || messages.size() > 0
COR_32:237:void_onReceive(java.lang.Object): message instanceof JBus.GetMessage && connected && messages.size() > 0  =>   (message instanceof JBus.GetMessage && connected) ^ messages.size() > 0
COD_1:183:void_onReceive(java.lang.Object):!connectionObjectExists => connectionObjectExists
COD_2:203:void_onReceive(java.lang.Object):!connected => connected
COD_3:214:void_onReceive(java.lang.Object):!subscribed => subscribed
COI_1:184:void_onReceive(java.lang.Object): connectionObjectExists  =>  !connectionObjectExists
COI_2:191:void_onReceive(java.lang.Object): connectionObjectExists  =>  !connectionObjectExists
COI_3:192:void_onReceive(java.lang.Object): connectionObjectExists  =>  !connectionObjectExists
COI_4:193:void_onReceive(java.lang.Object): connected  =>  !connected
COI_5:194:void_onReceive(java.lang.Object): subscribed  =>  !subscribed
COI_6:203:void_onReceive(java.lang.Object): connectionObjectExists  =>  !connectionObjectExists
COI_7:203:void_onReceive(java.lang.Object): connectionObjectExists && !connected  =>  !(connectionObjectExists && !connected)
COI_8:204:void_onReceive(java.lang.Object): connected  =>  !connected
COI_9:210:void_onReceive(java.lang.Object): connected  =>  !connected
COI_10:210:void_onReceive(java.lang.Object): message instanceof JBus.Disconnect && connected  =>  !(message instanceof JBus.Disconnect && connected)
COI_11:211:void_onReceive(java.lang.Object): connected  =>  !connected
COI_12:214:void_onReceive(java.lang.Object): connected  =>  !connected
COI_13:214:void_onReceive(java.lang.Object): message instanceof JBus.Subscribe && connected  =>  !(message instanceof JBus.Subscribe && connected)
COI_14:214:void_onReceive(java.lang.Object): message instanceof JBus.Subscribe && connected && !subscribed  =>  !(message instanceof JBus.Subscribe && connected && !subscribed)
COI_15:215:void_onReceive(java.lang.Object): subscribed  =>  !subscribed
COI_16:218:void_onReceive(java.lang.Object): connected  =>  !connected
COI_17:218:void_onReceive(java.lang.Object): message instanceof JBus.SubscribeCallback && connected  =>  !(message instanceof JBus.SubscribeCallback && connected)
COI_18:218:void_onReceive(java.lang.Object): callbacks < 10  =>  !(callbacks < 10)
COI_19:218:void_onReceive(java.lang.Object): message instanceof JBus.SubscribeCallback && connected && callbacks < 10  =>  !(message instanceof JBus.SubscribeCallback && connected && callbacks < 10)
COI_20:222:void_onReceive(java.lang.Object): connected  =>  !connected
COI_21:222:void_onReceive(java.lang.Object): message instanceof JBus.Unsubscribe && connected  =>  !(message instanceof JBus.Unsubscribe && connected)
COI_22:222:void_onReceive(java.lang.Object): subscribed  =>  !subscribed
COI_23:222:void_onReceive(java.lang.Object): callbacks > 0  =>  !(callbacks > 0)
COI_24:222:void_onReceive(java.lang.Object): subscribed || callbacks > 0  =>  !(subscribed || callbacks > 0)
COI_25:222:void_onReceive(java.lang.Object): message instanceof JBus.Unsubscribe && connected && (subscribed || callbacks > 0)  =>  !(message instanceof JBus.Unsubscribe && connected && (subscribed || callbacks > 0))
COI_26:223:void_onReceive(java.lang.Object): subscribed  =>  !subscribed
COI_27:227:void_onReceive(java.lang.Object): connected  =>  !connected
COI_28:227:void_onReceive(java.lang.Object): message instanceof JBus.UnsubscribeCallback && connected  =>  !(message instanceof JBus.UnsubscribeCallback && connected)
COI_29:227:void_onReceive(java.lang.Object): subscribed  =>  !subscribed
COI_30:227:void_onReceive(java.lang.Object): callbacks > 0  =>  !(callbacks > 0)
COI_31:227:void_onReceive(java.lang.Object): subscribed || callbacks > 0  =>  !(subscribed || callbacks > 0)
COI_32:227:void_onReceive(java.lang.Object): message instanceof JBus.UnsubscribeCallback && connected && (subscribed || callbacks > 0)  =>  !(message instanceof JBus.UnsubscribeCallback && connected && (subscribed || callbacks > 0))
COI_33:231:void_onReceive(java.lang.Object): connected  =>  !connected
COI_34:231:void_onReceive(java.lang.Object): message instanceof JBus.Publish && connected  =>  !(message instanceof JBus.Publish && connected)
COI_35:232:void_onReceive(java.lang.Object): subscribed  =>  !subscribed
COI_36:232:void_onReceive(java.lang.Object): callbacks > 0  =>  !(callbacks > 0)
COI_37:232:void_onReceive(java.lang.Object): subscribed || callbacks > 0  =>  !(subscribed || callbacks > 0)
COI_38:237:void_onReceive(java.lang.Object): connected  =>  !connected
COI_39:237:void_onReceive(java.lang.Object): message instanceof JBus.GetMessage && connected  =>  !(message instanceof JBus.GetMessage && connected)
COI_40:237:void_onReceive(java.lang.Object): messages.size() > 0  =>  !(messages.size() > 0)
COI_41:237:void_onReceive(java.lang.Object): message instanceof JBus.GetMessage && connected && messages.size() > 0  =>  !(message instanceof JBus.GetMessage && connected && messages.size() > 0)
LOI_1:25:CreateConnection(int):id => ~id
LOI_2:37:DestroyConnection(int):id => ~id
LOI_3:49:Connect(int):id => ~id
LOI_4:61:Disconnect(int):id => ~id
LOI_5:73:Subscribe(int):id => ~id
LOI_6:85:SubscribeCallback(int):id => ~id
LOI_7:97:Unsubscribe(int):id => ~id
LOI_8:109:UnsubscribeCallback(int):id => ~id
LOI_9:123:Publish(int,java.lang.String):id => ~id
LOI_10:136:GetMessage(int):id => ~id
LOI_11:218:void_onReceive(java.lang.Object):callbacks => ~callbacks
LOI_12:222:void_onReceive(java.lang.Object):callbacks => ~callbacks
LOI_13:227:void_onReceive(java.lang.Object):callbacks => ~callbacks
LOI_14:232:void_onReceive(java.lang.Object):callbacks => ~callbacks
ASRS_1:219:void_onReceive(java.lang.Object):callbacks += 1 => callbacks /= 1
ASRS_2:219:void_onReceive(java.lang.Object):callbacks += 1 => callbacks *= 1
ASRS_3:219:void_onReceive(java.lang.Object):callbacks += 1 => callbacks -= 1
ASRS_4:219:void_onReceive(java.lang.Object):callbacks += 1 => callbacks %= 1
ASRS_5:224:void_onReceive(java.lang.Object):callbacks -= 1 => callbacks += 1
ASRS_6:224:void_onReceive(java.lang.Object):callbacks -= 1 => callbacks /= 1
ASRS_7:224:void_onReceive(java.lang.Object):callbacks -= 1 => callbacks *= 1
ASRS_8:224:void_onReceive(java.lang.Object):callbacks -= 1 => callbacks %= 1
ASRS_9:228:void_onReceive(java.lang.Object):callbacks -= 1 => callbacks += 1
ASRS_10:228:void_onReceive(java.lang.Object):callbacks -= 1 => callbacks /= 1
ASRS_11:228:void_onReceive(java.lang.Object):callbacks -= 1 => callbacks *= 1
ASRS_12:228:void_onReceive(java.lang.Object):callbacks -= 1 => callbacks %= 1
SDL_1:25:CreateConnection(int): this.id = id;  =>  
SDL_2:37:DestroyConnection(int): this.id = id;  =>  
SDL_3:49:Connect(int): this.id = id;  =>  
SDL_4:61:Disconnect(int): this.id = id;  =>  
SDL_5:73:Subscribe(int): this.id = id;  =>  
SDL_6:85:SubscribeCallback(int): this.id = id;  =>  
SDL_7:97:Unsubscribe(int): this.id = id;  =>  
SDL_8:109:UnsubscribeCallback(int): this.id = id;  =>  
SDL_9:124:Publish(int,java.lang.String): this.id = id; this.message = message;  =>   this.message = message;
SDL_10:124:Publish(int,java.lang.String): this.id = id; this.message = message;  =>   this.id = id;
SDL_11:136:GetMessage(int): this.id = id;  =>  
SDL_12:147:boolean_equals(java.lang.Object): if (o instanceof JBus.Success) {     return true; } return false;  =>   return false;
SDL_13:149:boolean_equals(java.lang.Object): if (o instanceof JBus.Success) {     return true; }  =>   if (true) {     return true; }
SDL_14:148:boolean_equals(java.lang.Object): return true;  =>   return false;
SDL_15:150:boolean_equals(java.lang.Object): return false;  =>   return true;
SDL_16:160:boolean_equals(java.lang.Object): if (o instanceof JBus.Error) {     return true; } return false;  =>   return false;
SDL_17:162:boolean_equals(java.lang.Object): if (o instanceof JBus.Error) {     return true; }  =>   if (true) {     return true; }
SDL_18:161:boolean_equals(java.lang.Object): return true;  =>   return false;
SDL_19:163:boolean_equals(java.lang.Object): return false;  =>   return true;
SDL_20:182:void_onReceive(java.lang.Object): if (message instanceof JBus.CreateConnection) {     if (!connectionObjectExists) {         connectionObjectExists = true;         getSender().tell( new JBus.Success(), getSelf() );     } else {         getSender().tell( new JBus.Error(), getSelf() );     } } else {     if (message instanceof JBus.DestroyConnection) {         if (connectionObjectExists) {             connectionObjectExists = false;             connected = false;             subscribed = false;             callbacks = 0;             messages.clear();             getSender().tell( new JBus.Success(), getSelf() );         } else {             getSender().tell( new JBus.Error(), getSelf() );         }     } else {         if (message instanceof JBus.Connect) {             if (connectionObjectExists && !connected) {                 connected = true;                 getSender().tell( new JBus.Success(), getSelf() );             } else {                 getSender().tell( new JBus.Error(), getSelf() );             }         } else {             if (message instanceof JBus.Disconnect && connected) {                 connected = false;                 getSender().tell( new JBus.Success(), getSelf() );             } else {                 if (message instanceof JBus.Subscribe && connected && !subscribed) {                     subscribed = true;                     getSender().tell( new JBus.Success(), getSelf() );                 } else {                     if (message instanceof JBus.SubscribeCallback && connected && callbacks < 10) {                         callbacks += 1;                         getSender().tell( new JBus.Success(), getSelf() );                     } else {                         if (message instanceof JBus.Unsubscribe && connected && (subscribed || callbacks > 0)) {                             subscribed = false;                             callbacks -= 1;                             getSender().tell( new JBus.Success(), getSelf() );                         } else {                             if (message instanceof JBus.UnsubscribeCallback && connected && (subscribed || callbacks > 0)) {                                 callbacks -= 1;                                 getSender().tell( new JBus.Success(), getSelf() );                             } else {                                 if (message instanceof JBus.Publish && connected) {                                     if (subscribed || callbacks > 0) {                                         messages.add( ((JBus.Publish) message).message );                                     }                                     getSender().tell( new JBus.Success(), getSelf() );                                 } else {                                     if (message instanceof JBus.GetMessage && connected && messages.size() > 0) {                                         java.lang.String msg = messages.poll();                                         getSender().tell( new JBus.Success(), getSelf() );                                     } else {                                         getSender().tell( new JBus.Error(), getSelf() );                                     }                                 }                             }                         }                     }                 }             }         }     } }  =>  
SDL_21:183:void_onReceive(java.lang.Object): if (!connectionObjectExists) {     connectionObjectExists = true;     getSender().tell( new JBus.Success(), getSelf() ); } else {     getSender().tell( new JBus.Error(), getSelf() ); }  =>  
SDL_22:252:void_onReceive(java.lang.Object): if (message instanceof JBus.CreateConnection) {     if (!connectionObjectExists) {         connectionObjectExists = true;         getSender().tell( new JBus.Success(), getSelf() );     } else {         getSender().tell( new JBus.Error(), getSelf() );     } } else {     if (message instanceof JBus.DestroyConnection) {         if (connectionObjectExists) {             connectionObjectExists = false;             connected = false;             subscribed = false;             callbacks = 0;             messages.clear();             getSender().tell( new JBus.Success(), getSelf() );         } else {             getSender().tell( new JBus.Error(), getSelf() );         }     } else {         if (message instanceof JBus.Connect) {             if (connectionObjectExists && !connected) {                 connected = true;                 getSender().tell( new JBus.Success(), getSelf() );             } else {                 getSender().tell( new JBus.Error(), getSelf() );             }         } else {             if (message instanceof JBus.Disconnect && connected) {                 connected = false;                 getSender().tell( new JBus.Success(), getSelf() );             } else {                 if (message instanceof JBus.Subscribe && connected && !subscribed) {                     subscribed = true;                     getSender().tell( new JBus.Success(), getSelf() );                 } else {                     if (message instanceof JBus.SubscribeCallback && connected && callbacks < 10) {                         callbacks += 1;                         getSender().tell( new JBus.Success(), getSelf() );                     } else {                         if (message instanceof JBus.Unsubscribe && connected && (subscribed || callbacks > 0)) {                             subscribed = false;                             callbacks -= 1;                             getSender().tell( new JBus.Success(), getSelf() );                         } else {                             if (message instanceof JBus.UnsubscribeCallback && connected && (subscribed || callbacks > 0)) {                                 callbacks -= 1;                                 getSender().tell( new JBus.Success(), getSelf() );                             } else {                                 if (message instanceof JBus.Publish && connected) {                                     if (subscribed || callbacks > 0) {                                         messages.add( ((JBus.Publish) message).message );                                     }                                     getSender().tell( new JBus.Success(), getSelf() );                                 } else {                                     if (message instanceof JBus.GetMessage && connected && messages.size() > 0) {                                         java.lang.String msg = messages.poll();                                         getSender().tell( new JBus.Success(), getSelf() );                                     } else {                                         getSender().tell( new JBus.Error(), getSelf() );                                     }                                 }                             }                         }                     }                 }             }         }     } }  =>   if (true) {     if (!connectionObjectExists) {         connectionObjectExists = true;         getSender().tell( new JBus.Success(), getSelf() );     } else {         getSender().tell( new JBus.Error(), getSelf() );     } } else {     if (message instanceof JBus.DestroyConnection) {         if (connectionObjectExists) {             connectionObjectExists = false;             connected = false;             subscribed = false;             callbacks = 0;             messages.clear();             getSender().tell( new JBus.Success(), getSelf() );         } else {             getSender().tell( new JBus.Error(), getSelf() );         }     } else {         if (message instanceof JBus.Connect) {             if (connectionObjectExists && !connected) {                 connected = true;                 getSender().tell( new JBus.Success(), getSelf() );             } else {                 getSender().tell( new JBus.Error(), getSelf() );             }         } else {             if (message instanceof JBus.Disconnect && connected) {                 connected = false;                 getSender().tell( new JBus.Success(), getSelf() );             } else {                 if (message instanceof JBus.Subscribe && connected && !subscribed) {                     subscribed = true;                     getSender().tell( new JBus.Success(), getSelf() );                 } else {                     if (message instanceof JBus.SubscribeCallback && connected && callbacks < 10) {                         callbacks += 1;                         getSender().tell( new JBus.Success(), getSelf() );                     } else {                         if (message instanceof JBus.Unsubscribe && connected && (subscribed || callbacks > 0)) {                             subscribed = false;                             callbacks -= 1;                             getSender().tell( new JBus.Success(), getSelf() );                         } else {                             if (message instanceof JBus.UnsubscribeCallback && connected && (subscribed || callbacks > 0)) {                                 callbacks -= 1;                                 getSender().tell( new JBus.Success(), getSelf() );                             } else {                                 if (message instanceof JBus.Publish && connected) {                                     if (subscribed || callbacks > 0) {                                         messages.add( ((JBus.Publish) message).message );                                     }                                     getSender().tell( new JBus.Success(), getSelf() );                                 } else {                                     if (message instanceof JBus.GetMessage && connected && messages.size() > 0) {                                         java.lang.String msg = messages.poll();                                         getSender().tell( new JBus.Success(), getSelf() );                                     } else {                                         getSender().tell( new JBus.Error(), getSelf() );                                     }                                 }                             }                         }                     }                 }             }         }     } }
SDL_23:190:void_onReceive(java.lang.Object): if (message instanceof JBus.DestroyConnection) {     if (connectionObjectExists) {         connectionObjectExists = false;         connected = false;         subscribed = false;         callbacks = 0;         messages.clear();         getSender().tell( new JBus.Success(), getSelf() );     } else {         getSender().tell( new JBus.Error(), getSelf() );     } } else {     if (message instanceof JBus.Connect) {         if (connectionObjectExists && !connected) {             connected = true;             getSender().tell( new JBus.Success(), getSelf() );         } else {             getSender().tell( new JBus.Error(), getSelf() );         }     } else {         if (message instanceof JBus.Disconnect && connected) {             connected = false;             getSender().tell( new JBus.Success(), getSelf() );         } else {             if (message instanceof JBus.Subscribe && connected && !subscribed) {                 subscribed = true;                 getSender().tell( new JBus.Success(), getSelf() );             } else {                 if (message instanceof JBus.SubscribeCallback && connected && callbacks < 10) {                     callbacks += 1;                     getSender().tell( new JBus.Success(), getSelf() );                 } else {                     if (message instanceof JBus.Unsubscribe && connected && (subscribed || callbacks > 0)) {                         subscribed = false;                         callbacks -= 1;                         getSender().tell( new JBus.Success(), getSelf() );                     } else {                         if (message instanceof JBus.UnsubscribeCallback && connected && (subscribed || callbacks > 0)) {                             callbacks -= 1;                             getSender().tell( new JBus.Success(), getSelf() );                         } else {                             if (message instanceof JBus.Publish && connected) {                                 if (subscribed || callbacks > 0) {                                     messages.add( ((JBus.Publish) message).message );                                 }                                 getSender().tell( new JBus.Success(), getSelf() );                             } else {                                 if (message instanceof JBus.GetMessage && connected && messages.size() > 0) {                                     java.lang.String msg = messages.poll();                                     getSender().tell( new JBus.Success(), getSelf() );                                 } else {                                     getSender().tell( new JBus.Error(), getSelf() );                                 }                             }                         }                     }                 }             }         }     } }  =>  
SDL_24:185:void_onReceive(java.lang.Object): connectionObjectExists = true; getSender().tell( new JBus.Success(), getSelf() );  =>   getSender().tell( new JBus.Success(), getSelf() );
SDL_25:185:void_onReceive(java.lang.Object): connectionObjectExists = true; getSender().tell( new JBus.Success(), getSelf() );  =>   connectionObjectExists = true;
SDL_26:189:void_onReceive(java.lang.Object): if (!connectionObjectExists) {     connectionObjectExists = true;     getSender().tell( new JBus.Success(), getSelf() ); } else {     getSender().tell( new JBus.Error(), getSelf() ); }  =>   if (true) {     connectionObjectExists = true;     getSender().tell( new JBus.Success(), getSelf() ); } else {     getSender().tell( new JBus.Error(), getSelf() ); }
SDL_27:187:void_onReceive(java.lang.Object): getSender().tell( new JBus.Error(), getSelf() );  =>  
SDL_28:191:void_onReceive(java.lang.Object): if (connectionObjectExists) {     connectionObjectExists = false;     connected = false;     subscribed = false;     callbacks = 0;     messages.clear();     getSender().tell( new JBus.Success(), getSelf() ); } else {     getSender().tell( new JBus.Error(), getSelf() ); }  =>  
SDL_29:251:void_onReceive(java.lang.Object): if (message instanceof JBus.DestroyConnection) {     if (connectionObjectExists) {         connectionObjectExists = false;         connected = false;         subscribed = false;         callbacks = 0;         messages.clear();         getSender().tell( new JBus.Success(), getSelf() );     } else {         getSender().tell( new JBus.Error(), getSelf() );     } } else {     if (message instanceof JBus.Connect) {         if (connectionObjectExists && !connected) {             connected = true;             getSender().tell( new JBus.Success(), getSelf() );         } else {             getSender().tell( new JBus.Error(), getSelf() );         }     } else {         if (message instanceof JBus.Disconnect && connected) {             connected = false;             getSender().tell( new JBus.Success(), getSelf() );         } else {             if (message instanceof JBus.Subscribe && connected && !subscribed) {                 subscribed = true;                 getSender().tell( new JBus.Success(), getSelf() );             } else {                 if (message instanceof JBus.SubscribeCallback && connected && callbacks < 10) {                     callbacks += 1;                     getSender().tell( new JBus.Success(), getSelf() );                 } else {                     if (message instanceof JBus.Unsubscribe && connected && (subscribed || callbacks > 0)) {                         subscribed = false;                         callbacks -= 1;                         getSender().tell( new JBus.Success(), getSelf() );                     } else {                         if (message instanceof JBus.UnsubscribeCallback && connected && (subscribed || callbacks > 0)) {                             callbacks -= 1;                             getSender().tell( new JBus.Success(), getSelf() );                         } else {                             if (message instanceof JBus.Publish && connected) {                                 if (subscribed || callbacks > 0) {                                     messages.add( ((JBus.Publish) message).message );                                 }                                 getSender().tell( new JBus.Success(), getSelf() );                             } else {                                 if (message instanceof JBus.GetMessage && connected && messages.size() > 0) {                                     java.lang.String msg = messages.poll();                                     getSender().tell( new JBus.Success(), getSelf() );                                 } else {                                     getSender().tell( new JBus.Error(), getSelf() );                                 }                             }                         }                     }                 }             }         }     } }  =>   if (true) {     if (connectionObjectExists) {         connectionObjectExists = false;         connected = false;         subscribed = false;         callbacks = 0;         messages.clear();         getSender().tell( new JBus.Success(), getSelf() );     } else {         getSender().tell( new JBus.Error(), getSelf() );     } } else {     if (message instanceof JBus.Connect) {         if (connectionObjectExists && !connected) {             connected = true;             getSender().tell( new JBus.Success(), getSelf() );         } else {             getSender().tell( new JBus.Error(), getSelf() );         }     } else {         if (message instanceof JBus.Disconnect && connected) {             connected = false;             getSender().tell( new JBus.Success(), getSelf() );         } else {             if (message instanceof JBus.Subscribe && connected && !subscribed) {                 subscribed = true;                 getSender().tell( new JBus.Success(), getSelf() );             } else {                 if (message instanceof JBus.SubscribeCallback && connected && callbacks < 10) {                     callbacks += 1;                     getSender().tell( new JBus.Success(), getSelf() );                 } else {                     if (message instanceof JBus.Unsubscribe && connected && (subscribed || callbacks > 0)) {                         subscribed = false;                         callbacks -= 1;                         getSender().tell( new JBus.Success(), getSelf() );                     } else {                         if (message instanceof JBus.UnsubscribeCallback && connected && (subscribed || callbacks > 0)) {                             callbacks -= 1;                             getSender().tell( new JBus.Success(), getSelf() );                         } else {                             if (message instanceof JBus.Publish && connected) {                                 if (subscribed || callbacks > 0) {                                     messages.add( ((JBus.Publish) message).message );                                 }                                 getSender().tell( new JBus.Success(), getSelf() );                             } else {                                 if (message instanceof JBus.GetMessage && connected && messages.size() > 0) {                                     java.lang.String msg = messages.poll();                                     getSender().tell( new JBus.Success(), getSelf() );                                 } else {                                     getSender().tell( new JBus.Error(), getSelf() );                                 }                             }                         }                     }                 }             }         }     } }
SDL_30:202:void_onReceive(java.lang.Object): if (message instanceof JBus.Connect) {     if (connectionObjectExists && !connected) {         connected = true;         getSender().tell( new JBus.Success(), getSelf() );     } else {         getSender().tell( new JBus.Error(), getSelf() );     } } else {     if (message instanceof JBus.Disconnect && connected) {         connected = false;         getSender().tell( new JBus.Success(), getSelf() );     } else {         if (message instanceof JBus.Subscribe && connected && !subscribed) {             subscribed = true;             getSender().tell( new JBus.Success(), getSelf() );         } else {             if (message instanceof JBus.SubscribeCallback && connected && callbacks < 10) {                 callbacks += 1;                 getSender().tell( new JBus.Success(), getSelf() );             } else {                 if (message instanceof JBus.Unsubscribe && connected && (subscribed || callbacks > 0)) {                     subscribed = false;                     callbacks -= 1;                     getSender().tell( new JBus.Success(), getSelf() );                 } else {                     if (message instanceof JBus.UnsubscribeCallback && connected && (subscribed || callbacks > 0)) {                         callbacks -= 1;                         getSender().tell( new JBus.Success(), getSelf() );                     } else {                         if (message instanceof JBus.Publish && connected) {                             if (subscribed || callbacks > 0) {                                 messages.add( ((JBus.Publish) message).message );                             }                             getSender().tell( new JBus.Success(), getSelf() );                         } else {                             if (message instanceof JBus.GetMessage && connected && messages.size() > 0) {                                 java.lang.String msg = messages.poll();                                 getSender().tell( new JBus.Success(), getSelf() );                             } else {                                 getSender().tell( new JBus.Error(), getSelf() );                             }                         }                     }                 }             }         }     } }  =>  
SDL_31:197:void_onReceive(java.lang.Object): connectionObjectExists = false; connected = false; subscribed = false; callbacks = 0; messages.clear(); getSender().tell( new JBus.Success(), getSelf() );  =>   connected = false; subscribed = false; callbacks = 0; messages.clear(); getSender().tell( new JBus.Success(), getSelf() );
SDL_32:197:void_onReceive(java.lang.Object): connectionObjectExists = false; connected = false; subscribed = false; callbacks = 0; messages.clear(); getSender().tell( new JBus.Success(), getSelf() );  =>   connectionObjectExists = false; subscribed = false; callbacks = 0; messages.clear(); getSender().tell( new JBus.Success(), getSelf() );
SDL_33:197:void_onReceive(java.lang.Object): connectionObjectExists = false; connected = false; subscribed = false; callbacks = 0; messages.clear(); getSender().tell( new JBus.Success(), getSelf() );  =>   connectionObjectExists = false; connected = false; callbacks = 0; messages.clear(); getSender().tell( new JBus.Success(), getSelf() );
SDL_34:197:void_onReceive(java.lang.Object): connectionObjectExists = false; connected = false; subscribed = false; callbacks = 0; messages.clear(); getSender().tell( new JBus.Success(), getSelf() );  =>   connectionObjectExists = false; connected = false; subscribed = false; messages.clear(); getSender().tell( new JBus.Success(), getSelf() );
SDL_35:197:void_onReceive(java.lang.Object): connectionObjectExists = false; connected = false; subscribed = false; callbacks = 0; messages.clear(); getSender().tell( new JBus.Success(), getSelf() );  =>   connectionObjectExists = false; connected = false; subscribed = false; callbacks = 0; getSender().tell( new JBus.Success(), getSelf() );
SDL_36:197:void_onReceive(java.lang.Object): connectionObjectExists = false; connected = false; subscribed = false; callbacks = 0; messages.clear(); getSender().tell( new JBus.Success(), getSelf() );  =>   connectionObjectExists = false; connected = false; subscribed = false; callbacks = 0; messages.clear();
SDL_37:201:void_onReceive(java.lang.Object): if (connectionObjectExists) {     connectionObjectExists = false;     connected = false;     subscribed = false;     callbacks = 0;     messages.clear();     getSender().tell( new JBus.Success(), getSelf() ); } else {     getSender().tell( new JBus.Error(), getSelf() ); }  =>   if (true) {     connectionObjectExists = false;     connected = false;     subscribed = false;     callbacks = 0;     messages.clear();     getSender().tell( new JBus.Success(), getSelf() ); } else {     getSender().tell( new JBus.Error(), getSelf() ); }
SDL_38:199:void_onReceive(java.lang.Object): getSender().tell( new JBus.Error(), getSelf() );  =>  
SDL_39:203:void_onReceive(java.lang.Object): if (connectionObjectExists && !connected) {     connected = true;     getSender().tell( new JBus.Success(), getSelf() ); } else {     getSender().tell( new JBus.Error(), getSelf() ); }  =>  
SDL_40:250:void_onReceive(java.lang.Object): if (message instanceof JBus.Connect) {     if (connectionObjectExists && !connected) {         connected = true;         getSender().tell( new JBus.Success(), getSelf() );     } else {         getSender().tell( new JBus.Error(), getSelf() );     } } else {     if (message instanceof JBus.Disconnect && connected) {         connected = false;         getSender().tell( new JBus.Success(), getSelf() );     } else {         if (message instanceof JBus.Subscribe && connected && !subscribed) {             subscribed = true;             getSender().tell( new JBus.Success(), getSelf() );         } else {             if (message instanceof JBus.SubscribeCallback && connected && callbacks < 10) {                 callbacks += 1;                 getSender().tell( new JBus.Success(), getSelf() );             } else {                 if (message instanceof JBus.Unsubscribe && connected && (subscribed || callbacks > 0)) {                     subscribed = false;                     callbacks -= 1;                     getSender().tell( new JBus.Success(), getSelf() );                 } else {                     if (message instanceof JBus.UnsubscribeCallback && connected && (subscribed || callbacks > 0)) {                         callbacks -= 1;                         getSender().tell( new JBus.Success(), getSelf() );                     } else {                         if (message instanceof JBus.Publish && connected) {                             if (subscribed || callbacks > 0) {                                 messages.add( ((JBus.Publish) message).message );                             }                             getSender().tell( new JBus.Success(), getSelf() );                         } else {                             if (message instanceof JBus.GetMessage && connected && messages.size() > 0) {                                 java.lang.String msg = messages.poll();                                 getSender().tell( new JBus.Success(), getSelf() );                             } else {                                 getSender().tell( new JBus.Error(), getSelf() );                             }                         }                     }                 }             }         }     } }  =>   if (true) {     if (connectionObjectExists && !connected) {         connected = true;         getSender().tell( new JBus.Success(), getSelf() );     } else {         getSender().tell( new JBus.Error(), getSelf() );     } } else {     if (message instanceof JBus.Disconnect && connected) {         connected = false;         getSender().tell( new JBus.Success(), getSelf() );     } else {         if (message instanceof JBus.Subscribe && connected && !subscribed) {             subscribed = true;             getSender().tell( new JBus.Success(), getSelf() );         } else {             if (message instanceof JBus.SubscribeCallback && connected && callbacks < 10) {                 callbacks += 1;                 getSender().tell( new JBus.Success(), getSelf() );             } else {                 if (message instanceof JBus.Unsubscribe && connected && (subscribed || callbacks > 0)) {                     subscribed = false;                     callbacks -= 1;                     getSender().tell( new JBus.Success(), getSelf() );                 } else {                     if (message instanceof JBus.UnsubscribeCallback && connected && (subscribed || callbacks > 0)) {                         callbacks -= 1;                         getSender().tell( new JBus.Success(), getSelf() );                     } else {                         if (message instanceof JBus.Publish && connected) {                             if (subscribed || callbacks > 0) {                                 messages.add( ((JBus.Publish) message).message );                             }                             getSender().tell( new JBus.Success(), getSelf() );                         } else {                             if (message instanceof JBus.GetMessage && connected && messages.size() > 0) {                                 java.lang.String msg = messages.poll();                                 getSender().tell( new JBus.Success(), getSelf() );                             } else {                                 getSender().tell( new JBus.Error(), getSelf() );                             }                         }                     }                 }             }         }     } }
SDL_41:210:void_onReceive(java.lang.Object): if (message instanceof JBus.Disconnect && connected) {     connected = false;     getSender().tell( new JBus.Success(), getSelf() ); } else {     if (message instanceof JBus.Subscribe && connected && !subscribed) {         subscribed = true;         getSender().tell( new JBus.Success(), getSelf() );     } else {         if (message instanceof JBus.SubscribeCallback && connected && callbacks < 10) {             callbacks += 1;             getSender().tell( new JBus.Success(), getSelf() );         } else {             if (message instanceof JBus.Unsubscribe && connected && (subscribed || callbacks > 0)) {                 subscribed = false;                 callbacks -= 1;                 getSender().tell( new JBus.Success(), getSelf() );             } else {                 if (message instanceof JBus.UnsubscribeCallback && connected && (subscribed || callbacks > 0)) {                     callbacks -= 1;                     getSender().tell( new JBus.Success(), getSelf() );                 } else {                     if (message instanceof JBus.Publish && connected) {                         if (subscribed || callbacks > 0) {                             messages.add( ((JBus.Publish) message).message );                         }                         getSender().tell( new JBus.Success(), getSelf() );                     } else {                         if (message instanceof JBus.GetMessage && connected && messages.size() > 0) {                             java.lang.String msg = messages.poll();                             getSender().tell( new JBus.Success(), getSelf() );                         } else {                             getSender().tell( new JBus.Error(), getSelf() );                         }                     }                 }             }         }     } }  =>  
SDL_42:205:void_onReceive(java.lang.Object): connected = true; getSender().tell( new JBus.Success(), getSelf() );  =>   getSender().tell( new JBus.Success(), getSelf() );
SDL_43:205:void_onReceive(java.lang.Object): connected = true; getSender().tell( new JBus.Success(), getSelf() );  =>   connected = true;
SDL_44:209:void_onReceive(java.lang.Object): if (connectionObjectExists && !connected) {     connected = true;     getSender().tell( new JBus.Success(), getSelf() ); } else {     getSender().tell( new JBus.Error(), getSelf() ); }  =>   if (true) {     connected = true;     getSender().tell( new JBus.Success(), getSelf() ); } else {     getSender().tell( new JBus.Error(), getSelf() ); }
SDL_45:207:void_onReceive(java.lang.Object): getSender().tell( new JBus.Error(), getSelf() );  =>  
SDL_46:212:void_onReceive(java.lang.Object): connected = false; getSender().tell( new JBus.Success(), getSelf() );  =>   getSender().tell( new JBus.Success(), getSelf() );
SDL_47:212:void_onReceive(java.lang.Object): connected = false; getSender().tell( new JBus.Success(), getSelf() );  =>   connected = false;
SDL_48:249:void_onReceive(java.lang.Object): if (message instanceof JBus.Disconnect && connected) {     connected = false;     getSender().tell( new JBus.Success(), getSelf() ); } else {     if (message instanceof JBus.Subscribe && connected && !subscribed) {         subscribed = true;         getSender().tell( new JBus.Success(), getSelf() );     } else {         if (message instanceof JBus.SubscribeCallback && connected && callbacks < 10) {             callbacks += 1;             getSender().tell( new JBus.Success(), getSelf() );         } else {             if (message instanceof JBus.Unsubscribe && connected && (subscribed || callbacks > 0)) {                 subscribed = false;                 callbacks -= 1;                 getSender().tell( new JBus.Success(), getSelf() );             } else {                 if (message instanceof JBus.UnsubscribeCallback && connected && (subscribed || callbacks > 0)) {                     callbacks -= 1;                     getSender().tell( new JBus.Success(), getSelf() );                 } else {                     if (message instanceof JBus.Publish && connected) {                         if (subscribed || callbacks > 0) {                             messages.add( ((JBus.Publish) message).message );                         }                         getSender().tell( new JBus.Success(), getSelf() );                     } else {                         if (message instanceof JBus.GetMessage && connected && messages.size() > 0) {                             java.lang.String msg = messages.poll();                             getSender().tell( new JBus.Success(), getSelf() );                         } else {                             getSender().tell( new JBus.Error(), getSelf() );                         }                     }                 }             }         }     } }  =>   if (true) {     connected = false;     getSender().tell( new JBus.Success(), getSelf() ); } else {     if (message instanceof JBus.Subscribe && connected && !subscribed) {         subscribed = true;         getSender().tell( new JBus.Success(), getSelf() );     } else {         if (message instanceof JBus.SubscribeCallback && connected && callbacks < 10) {             callbacks += 1;             getSender().tell( new JBus.Success(), getSelf() );         } else {             if (message instanceof JBus.Unsubscribe && connected && (subscribed || callbacks > 0)) {                 subscribed = false;                 callbacks -= 1;                 getSender().tell( new JBus.Success(), getSelf() );             } else {                 if (message instanceof JBus.UnsubscribeCallback && connected && (subscribed || callbacks > 0)) {                     callbacks -= 1;                     getSender().tell( new JBus.Success(), getSelf() );                 } else {                     if (message instanceof JBus.Publish && connected) {                         if (subscribed || callbacks > 0) {                             messages.add( ((JBus.Publish) message).message );                         }                         getSender().tell( new JBus.Success(), getSelf() );                     } else {                         if (message instanceof JBus.GetMessage && connected && messages.size() > 0) {                             java.lang.String msg = messages.poll();                             getSender().tell( new JBus.Success(), getSelf() );                         } else {                             getSender().tell( new JBus.Error(), getSelf() );                         }                     }                 }             }         }     } }
SDL_49:214:void_onReceive(java.lang.Object): if (message instanceof JBus.Subscribe && connected && !subscribed) {     subscribed = true;     getSender().tell( new JBus.Success(), getSelf() ); } else {     if (message instanceof JBus.SubscribeCallback && connected && callbacks < 10) {         callbacks += 1;         getSender().tell( new JBus.Success(), getSelf() );     } else {         if (message instanceof JBus.Unsubscribe && connected && (subscribed || callbacks > 0)) {             subscribed = false;             callbacks -= 1;             getSender().tell( new JBus.Success(), getSelf() );         } else {             if (message instanceof JBus.UnsubscribeCallback && connected && (subscribed || callbacks > 0)) {                 callbacks -= 1;                 getSender().tell( new JBus.Success(), getSelf() );             } else {                 if (message instanceof JBus.Publish && connected) {                     if (subscribed || callbacks > 0) {                         messages.add( ((JBus.Publish) message).message );                     }                     getSender().tell( new JBus.Success(), getSelf() );                 } else {                     if (message instanceof JBus.GetMessage && connected && messages.size() > 0) {                         java.lang.String msg = messages.poll();                         getSender().tell( new JBus.Success(), getSelf() );                     } else {                         getSender().tell( new JBus.Error(), getSelf() );                     }                 }             }         }     } }  =>  
SDL_50:216:void_onReceive(java.lang.Object): subscribed = true; getSender().tell( new JBus.Success(), getSelf() );  =>   getSender().tell( new JBus.Success(), getSelf() );
SDL_51:216:void_onReceive(java.lang.Object): subscribed = true; getSender().tell( new JBus.Success(), getSelf() );  =>   subscribed = true;
SDL_52:248:void_onReceive(java.lang.Object): if (message instanceof JBus.Subscribe && connected && !subscribed) {     subscribed = true;     getSender().tell( new JBus.Success(), getSelf() ); } else {     if (message instanceof JBus.SubscribeCallback && connected && callbacks < 10) {         callbacks += 1;         getSender().tell( new JBus.Success(), getSelf() );     } else {         if (message instanceof JBus.Unsubscribe && connected && (subscribed || callbacks > 0)) {             subscribed = false;             callbacks -= 1;             getSender().tell( new JBus.Success(), getSelf() );         } else {             if (message instanceof JBus.UnsubscribeCallback && connected && (subscribed || callbacks > 0)) {                 callbacks -= 1;                 getSender().tell( new JBus.Success(), getSelf() );             } else {                 if (message instanceof JBus.Publish && connected) {                     if (subscribed || callbacks > 0) {                         messages.add( ((JBus.Publish) message).message );                     }                     getSender().tell( new JBus.Success(), getSelf() );                 } else {                     if (message instanceof JBus.GetMessage && connected && messages.size() > 0) {                         java.lang.String msg = messages.poll();                         getSender().tell( new JBus.Success(), getSelf() );                     } else {                         getSender().tell( new JBus.Error(), getSelf() );                     }                 }             }         }     } }  =>   if (true) {     subscribed = true;     getSender().tell( new JBus.Success(), getSelf() ); } else {     if (message instanceof JBus.SubscribeCallback && connected && callbacks < 10) {         callbacks += 1;         getSender().tell( new JBus.Success(), getSelf() );     } else {         if (message instanceof JBus.Unsubscribe && connected && (subscribed || callbacks > 0)) {             subscribed = false;             callbacks -= 1;             getSender().tell( new JBus.Success(), getSelf() );         } else {             if (message instanceof JBus.UnsubscribeCallback && connected && (subscribed || callbacks > 0)) {                 callbacks -= 1;                 getSender().tell( new JBus.Success(), getSelf() );             } else {                 if (message instanceof JBus.Publish && connected) {                     if (subscribed || callbacks > 0) {                         messages.add( ((JBus.Publish) message).message );                     }                     getSender().tell( new JBus.Success(), getSelf() );                 } else {                     if (message instanceof JBus.GetMessage && connected && messages.size() > 0) {                         java.lang.String msg = messages.poll();                         getSender().tell( new JBus.Success(), getSelf() );                     } else {                         getSender().tell( new JBus.Error(), getSelf() );                     }                 }             }         }     } }
SDL_53:218:void_onReceive(java.lang.Object): if (message instanceof JBus.SubscribeCallback && connected && callbacks < 10) {     callbacks += 1;     getSender().tell( new JBus.Success(), getSelf() ); } else {     if (message instanceof JBus.Unsubscribe && connected && (subscribed || callbacks > 0)) {         subscribed = false;         callbacks -= 1;         getSender().tell( new JBus.Success(), getSelf() );     } else {         if (message instanceof JBus.UnsubscribeCallback && connected && (subscribed || callbacks > 0)) {             callbacks -= 1;             getSender().tell( new JBus.Success(), getSelf() );         } else {             if (message instanceof JBus.Publish && connected) {                 if (subscribed || callbacks > 0) {                     messages.add( ((JBus.Publish) message).message );                 }                 getSender().tell( new JBus.Success(), getSelf() );             } else {                 if (message instanceof JBus.GetMessage && connected && messages.size() > 0) {                     java.lang.String msg = messages.poll();                     getSender().tell( new JBus.Success(), getSelf() );                 } else {                     getSender().tell( new JBus.Error(), getSelf() );                 }             }         }     } }  =>  
SDL_54:220:void_onReceive(java.lang.Object): callbacks += 1; getSender().tell( new JBus.Success(), getSelf() );  =>   getSender().tell( new JBus.Success(), getSelf() );
SDL_55:220:void_onReceive(java.lang.Object): callbacks += 1; getSender().tell( new JBus.Success(), getSelf() );  =>   callbacks += 1;
SDL_56:247:void_onReceive(java.lang.Object): if (message instanceof JBus.SubscribeCallback && connected && callbacks < 10) {     callbacks += 1;     getSender().tell( new JBus.Success(), getSelf() ); } else {     if (message instanceof JBus.Unsubscribe && connected && (subscribed || callbacks > 0)) {         subscribed = false;         callbacks -= 1;         getSender().tell( new JBus.Success(), getSelf() );     } else {         if (message instanceof JBus.UnsubscribeCallback && connected && (subscribed || callbacks > 0)) {             callbacks -= 1;             getSender().tell( new JBus.Success(), getSelf() );         } else {             if (message instanceof JBus.Publish && connected) {                 if (subscribed || callbacks > 0) {                     messages.add( ((JBus.Publish) message).message );                 }                 getSender().tell( new JBus.Success(), getSelf() );             } else {                 if (message instanceof JBus.GetMessage && connected && messages.size() > 0) {                     java.lang.String msg = messages.poll();                     getSender().tell( new JBus.Success(), getSelf() );                 } else {                     getSender().tell( new JBus.Error(), getSelf() );                 }             }         }     } }  =>   if (true) {     callbacks += 1;     getSender().tell( new JBus.Success(), getSelf() ); } else {     if (message instanceof JBus.Unsubscribe && connected && (subscribed || callbacks > 0)) {         subscribed = false;         callbacks -= 1;         getSender().tell( new JBus.Success(), getSelf() );     } else {         if (message instanceof JBus.UnsubscribeCallback && connected && (subscribed || callbacks > 0)) {             callbacks -= 1;             getSender().tell( new JBus.Success(), getSelf() );         } else {             if (message instanceof JBus.Publish && connected) {                 if (subscribed || callbacks > 0) {                     messages.add( ((JBus.Publish) message).message );                 }                 getSender().tell( new JBus.Success(), getSelf() );             } else {                 if (message instanceof JBus.GetMessage && connected && messages.size() > 0) {                     java.lang.String msg = messages.poll();                     getSender().tell( new JBus.Success(), getSelf() );                 } else {                     getSender().tell( new JBus.Error(), getSelf() );                 }             }         }     } }
SDL_57:222:void_onReceive(java.lang.Object): if (message instanceof JBus.Unsubscribe && connected && (subscribed || callbacks > 0)) {     subscribed = false;     callbacks -= 1;     getSender().tell( new JBus.Success(), getSelf() ); } else {     if (message instanceof JBus.UnsubscribeCallback && connected && (subscribed || callbacks > 0)) {         callbacks -= 1;         getSender().tell( new JBus.Success(), getSelf() );     } else {         if (message instanceof JBus.Publish && connected) {             if (subscribed || callbacks > 0) {                 messages.add( ((JBus.Publish) message).message );             }             getSender().tell( new JBus.Success(), getSelf() );         } else {             if (message instanceof JBus.GetMessage && connected && messages.size() > 0) {                 java.lang.String msg = messages.poll();                 getSender().tell( new JBus.Success(), getSelf() );             } else {                 getSender().tell( new JBus.Error(), getSelf() );             }         }     } }  =>  
SDL_58:225:void_onReceive(java.lang.Object): subscribed = false; callbacks -= 1; getSender().tell( new JBus.Success(), getSelf() );  =>   callbacks -= 1; getSender().tell( new JBus.Success(), getSelf() );
SDL_59:225:void_onReceive(java.lang.Object): subscribed = false; callbacks -= 1; getSender().tell( new JBus.Success(), getSelf() );  =>   subscribed = false; getSender().tell( new JBus.Success(), getSelf() );
SDL_60:225:void_onReceive(java.lang.Object): subscribed = false; callbacks -= 1; getSender().tell( new JBus.Success(), getSelf() );  =>   subscribed = false; callbacks -= 1;
SDL_61:246:void_onReceive(java.lang.Object): if (message instanceof JBus.Unsubscribe && connected && (subscribed || callbacks > 0)) {     subscribed = false;     callbacks -= 1;     getSender().tell( new JBus.Success(), getSelf() ); } else {     if (message instanceof JBus.UnsubscribeCallback && connected && (subscribed || callbacks > 0)) {         callbacks -= 1;         getSender().tell( new JBus.Success(), getSelf() );     } else {         if (message instanceof JBus.Publish && connected) {             if (subscribed || callbacks > 0) {                 messages.add( ((JBus.Publish) message).message );             }             getSender().tell( new JBus.Success(), getSelf() );         } else {             if (message instanceof JBus.GetMessage && connected && messages.size() > 0) {                 java.lang.String msg = messages.poll();                 getSender().tell( new JBus.Success(), getSelf() );             } else {                 getSender().tell( new JBus.Error(), getSelf() );             }         }     } }  =>   if (true) {     subscribed = false;     callbacks -= 1;     getSender().tell( new JBus.Success(), getSelf() ); } else {     if (message instanceof JBus.UnsubscribeCallback && connected && (subscribed || callbacks > 0)) {         callbacks -= 1;         getSender().tell( new JBus.Success(), getSelf() );     } else {         if (message instanceof JBus.Publish && connected) {             if (subscribed || callbacks > 0) {                 messages.add( ((JBus.Publish) message).message );             }             getSender().tell( new JBus.Success(), getSelf() );         } else {             if (message instanceof JBus.GetMessage && connected && messages.size() > 0) {                 java.lang.String msg = messages.poll();                 getSender().tell( new JBus.Success(), getSelf() );             } else {                 getSender().tell( new JBus.Error(), getSelf() );             }         }     } }
SDL_62:227:void_onReceive(java.lang.Object): if (message instanceof JBus.UnsubscribeCallback && connected && (subscribed || callbacks > 0)) {     callbacks -= 1;     getSender().tell( new JBus.Success(), getSelf() ); } else {     if (message instanceof JBus.Publish && connected) {         if (subscribed || callbacks > 0) {             messages.add( ((JBus.Publish) message).message );         }         getSender().tell( new JBus.Success(), getSelf() );     } else {         if (message instanceof JBus.GetMessage && connected && messages.size() > 0) {             java.lang.String msg = messages.poll();             getSender().tell( new JBus.Success(), getSelf() );         } else {             getSender().tell( new JBus.Error(), getSelf() );         }     } }  =>  
SDL_63:229:void_onReceive(java.lang.Object): callbacks -= 1; getSender().tell( new JBus.Success(), getSelf() );  =>   getSender().tell( new JBus.Success(), getSelf() );
SDL_64:229:void_onReceive(java.lang.Object): callbacks -= 1; getSender().tell( new JBus.Success(), getSelf() );  =>   callbacks -= 1;
SDL_65:245:void_onReceive(java.lang.Object): if (message instanceof JBus.UnsubscribeCallback && connected && (subscribed || callbacks > 0)) {     callbacks -= 1;     getSender().tell( new JBus.Success(), getSelf() ); } else {     if (message instanceof JBus.Publish && connected) {         if (subscribed || callbacks > 0) {             messages.add( ((JBus.Publish) message).message );         }         getSender().tell( new JBus.Success(), getSelf() );     } else {         if (message instanceof JBus.GetMessage && connected && messages.size() > 0) {             java.lang.String msg = messages.poll();             getSender().tell( new JBus.Success(), getSelf() );         } else {             getSender().tell( new JBus.Error(), getSelf() );         }     } }  =>   if (true) {     callbacks -= 1;     getSender().tell( new JBus.Success(), getSelf() ); } else {     if (message instanceof JBus.Publish && connected) {         if (subscribed || callbacks > 0) {             messages.add( ((JBus.Publish) message).message );         }         getSender().tell( new JBus.Success(), getSelf() );     } else {         if (message instanceof JBus.GetMessage && connected && messages.size() > 0) {             java.lang.String msg = messages.poll();             getSender().tell( new JBus.Success(), getSelf() );         } else {             getSender().tell( new JBus.Error(), getSelf() );         }     } }
SDL_66:231:void_onReceive(java.lang.Object): if (message instanceof JBus.Publish && connected) {     if (subscribed || callbacks > 0) {         messages.add( ((JBus.Publish) message).message );     }     getSender().tell( new JBus.Success(), getSelf() ); } else {     if (message instanceof JBus.GetMessage && connected && messages.size() > 0) {         java.lang.String msg = messages.poll();         getSender().tell( new JBus.Success(), getSelf() );     } else {         getSender().tell( new JBus.Error(), getSelf() );     } }  =>  
SDL_67:233:void_onReceive(java.lang.Object): if (subscribed || callbacks > 0) {     messages.add( ((JBus.Publish) message).message ); } getSender().tell( new JBus.Success(), getSelf() );  =>   getSender().tell( new JBus.Success(), getSelf() );
SDL_68:235:void_onReceive(java.lang.Object): if (subscribed || callbacks > 0) {     messages.add( ((JBus.Publish) message).message ); } getSender().tell( new JBus.Success(), getSelf() );  =>   if (subscribed || callbacks > 0) {     messages.add( ((JBus.Publish) message).message ); }
SDL_69:244:void_onReceive(java.lang.Object): if (message instanceof JBus.Publish && connected) {     if (subscribed || callbacks > 0) {         messages.add( ((JBus.Publish) message).message );     }     getSender().tell( new JBus.Success(), getSelf() ); } else {     if (message instanceof JBus.GetMessage && connected && messages.size() > 0) {         java.lang.String msg = messages.poll();         getSender().tell( new JBus.Success(), getSelf() );     } else {         getSender().tell( new JBus.Error(), getSelf() );     } }  =>   if (true) {     if (subscribed || callbacks > 0) {         messages.add( ((JBus.Publish) message).message );     }     getSender().tell( new JBus.Success(), getSelf() ); } else {     if (message instanceof JBus.GetMessage && connected && messages.size() > 0) {         java.lang.String msg = messages.poll();         getSender().tell( new JBus.Success(), getSelf() );     } else {         getSender().tell( new JBus.Error(), getSelf() );     } }
SDL_70:237:void_onReceive(java.lang.Object): if (message instanceof JBus.GetMessage && connected && messages.size() > 0) {     java.lang.String msg = messages.poll();     getSender().tell( new JBus.Success(), getSelf() ); } else {     getSender().tell( new JBus.Error(), getSelf() ); }  =>  
SDL_71:233:void_onReceive(java.lang.Object): messages.add( ((JBus.Publish) message).message );  =>  
SDL_72:235:void_onReceive(java.lang.Object): if (subscribed || callbacks > 0) {     messages.add( ((JBus.Publish) message).message ); }  =>   if (true) {     messages.add( ((JBus.Publish) message).message ); }
SDL_73:239:void_onReceive(java.lang.Object): java.lang.String msg = messages.poll(); getSender().tell( new JBus.Success(), getSelf() );  =>   java.lang.String msg = messages.poll();
SDL_74:243:void_onReceive(java.lang.Object): if (message instanceof JBus.GetMessage && connected && messages.size() > 0) {     java.lang.String msg = messages.poll();     getSender().tell( new JBus.Success(), getSelf() ); } else {     getSender().tell( new JBus.Error(), getSelf() ); }  =>   if (true) {     java.lang.String msg = messages.poll();     getSender().tell( new JBus.Success(), getSelf() ); } else {     getSender().tell( new JBus.Error(), getSelf() ); }
SDL_75:241:void_onReceive(java.lang.Object): getSender().tell( new JBus.Error(), getSelf() );  =>  
VDL_1:183:void_onReceive(java.lang.Object):!connectionObjectExists =>  
VDL_2:203:void_onReceive(java.lang.Object):!connected =>  
VDL_3:203:void_onReceive(java.lang.Object):connectionObjectExists && !connected => !connected
VDL_4:210:void_onReceive(java.lang.Object):message instanceof JBus.Disconnect && connected => message instanceof JBus.Disconnect
VDL_5:214:void_onReceive(java.lang.Object):message instanceof JBus.Subscribe && connected => message instanceof JBus.Subscribe
VDL_6:214:void_onReceive(java.lang.Object):!subscribed =>  
VDL_7:218:void_onReceive(java.lang.Object):message instanceof JBus.SubscribeCallback && connected => message instanceof JBus.SubscribeCallback
VDL_8:218:void_onReceive(java.lang.Object):callbacks < 10 => 10
VDL_9:222:void_onReceive(java.lang.Object):message instanceof JBus.Unsubscribe && connected => message instanceof JBus.Unsubscribe
VDL_10:222:void_onReceive(java.lang.Object):callbacks > 0 => 0
VDL_11:222:void_onReceive(java.lang.Object):subscribed || callbacks > 0 => callbacks > 0
VDL_12:227:void_onReceive(java.lang.Object):message instanceof JBus.UnsubscribeCallback && connected => message instanceof JBus.UnsubscribeCallback
VDL_13:227:void_onReceive(java.lang.Object):callbacks > 0 => 0
VDL_14:227:void_onReceive(java.lang.Object):subscribed || callbacks > 0 => callbacks > 0
VDL_15:231:void_onReceive(java.lang.Object):message instanceof JBus.Publish && connected => message instanceof JBus.Publish
VDL_16:232:void_onReceive(java.lang.Object):callbacks > 0 => 0
VDL_17:232:void_onReceive(java.lang.Object):subscribed || callbacks > 0 => callbacks > 0
VDL_18:237:void_onReceive(java.lang.Object):message instanceof JBus.GetMessage && connected => message instanceof JBus.GetMessage
ODL_1:183:void_onReceive(java.lang.Object):!connectionObjectExists => connectionObjectExists
ODL_2:203:void_onReceive(java.lang.Object):!connected => connected
ODL_3:203:void_onReceive(java.lang.Object):connectionObjectExists && !connected => connectionObjectExists
ODL_4:203:void_onReceive(java.lang.Object):connectionObjectExists && !connected => !connected
ODL_5:210:void_onReceive(java.lang.Object):message instanceof JBus.Disconnect && connected => message instanceof JBus.Disconnect
ODL_6:210:void_onReceive(java.lang.Object):message instanceof JBus.Disconnect && connected => connected
ODL_7:214:void_onReceive(java.lang.Object):message instanceof JBus.Subscribe && connected => message instanceof JBus.Subscribe
ODL_8:214:void_onReceive(java.lang.Object):message instanceof JBus.Subscribe && connected => connected
ODL_9:214:void_onReceive(java.lang.Object):!subscribed => subscribed
ODL_10:214:void_onReceive(java.lang.Object):message instanceof JBus.Subscribe && connected && !subscribed => message instanceof JBus.Subscribe && connected
ODL_11:214:void_onReceive(java.lang.Object):message instanceof JBus.Subscribe && connected && !subscribed => !subscribed
ODL_12:218:void_onReceive(java.lang.Object):message instanceof JBus.SubscribeCallback && connected => message instanceof JBus.SubscribeCallback
ODL_13:218:void_onReceive(java.lang.Object):message instanceof JBus.SubscribeCallback && connected => connected
ODL_14:218:void_onReceive(java.lang.Object):callbacks < 10 => callbacks
ODL_15:218:void_onReceive(java.lang.Object):callbacks < 10 => 10
ODL_16:218:void_onReceive(java.lang.Object):message instanceof JBus.SubscribeCallback && connected && callbacks < 10 => message instanceof JBus.SubscribeCallback && connected
ODL_17:218:void_onReceive(java.lang.Object):message instanceof JBus.SubscribeCallback && connected && callbacks < 10 => callbacks < 10
ODL_18:219:void_onReceive(java.lang.Object):callbacks += 1 => callbacks = 1
ODL_19:222:void_onReceive(java.lang.Object):message instanceof JBus.Unsubscribe && connected => message instanceof JBus.Unsubscribe
ODL_20:222:void_onReceive(java.lang.Object):message instanceof JBus.Unsubscribe && connected => connected
ODL_21:222:void_onReceive(java.lang.Object):callbacks > 0 => callbacks
ODL_22:222:void_onReceive(java.lang.Object):callbacks > 0 => 0
ODL_23:222:void_onReceive(java.lang.Object):subscribed || callbacks > 0 => subscribed
ODL_24:222:void_onReceive(java.lang.Object):subscribed || callbacks > 0 => callbacks > 0
ODL_25:222:void_onReceive(java.lang.Object):message instanceof JBus.Unsubscribe && connected && (subscribed || callbacks > 0) => message instanceof JBus.Unsubscribe && connected
ODL_26:222:void_onReceive(java.lang.Object):message instanceof JBus.Unsubscribe && connected && (subscribed || callbacks > 0) => subscribed || callbacks > 0
ODL_27:224:void_onReceive(java.lang.Object):callbacks -= 1 => callbacks = 1
ODL_28:227:void_onReceive(java.lang.Object):message instanceof JBus.UnsubscribeCallback && connected => message instanceof JBus.UnsubscribeCallback
ODL_29:227:void_onReceive(java.lang.Object):message instanceof JBus.UnsubscribeCallback && connected => connected
ODL_30:227:void_onReceive(java.lang.Object):callbacks > 0 => callbacks
ODL_31:227:void_onReceive(java.lang.Object):callbacks > 0 => 0
ODL_32:227:void_onReceive(java.lang.Object):subscribed || callbacks > 0 => subscribed
ODL_33:227:void_onReceive(java.lang.Object):subscribed || callbacks > 0 => callbacks > 0
ODL_34:227:void_onReceive(java.lang.Object):message instanceof JBus.UnsubscribeCallback && connected && (subscribed || callbacks > 0) => message instanceof JBus.UnsubscribeCallback && connected
ODL_35:227:void_onReceive(java.lang.Object):message instanceof JBus.UnsubscribeCallback && connected && (subscribed || callbacks > 0) => subscribed || callbacks > 0
ODL_36:228:void_onReceive(java.lang.Object):callbacks -= 1 => callbacks = 1
ODL_37:231:void_onReceive(java.lang.Object):message instanceof JBus.Publish && connected => message instanceof JBus.Publish
ODL_38:231:void_onReceive(java.lang.Object):message instanceof JBus.Publish && connected => connected
ODL_39:232:void_onReceive(java.lang.Object):callbacks > 0 => callbacks
ODL_40:232:void_onReceive(java.lang.Object):callbacks > 0 => 0
ODL_41:232:void_onReceive(java.lang.Object):subscribed || callbacks > 0 => subscribed
ODL_42:232:void_onReceive(java.lang.Object):subscribed || callbacks > 0 => callbacks > 0
ODL_43:237:void_onReceive(java.lang.Object):message instanceof JBus.GetMessage && connected => message instanceof JBus.GetMessage
ODL_44:237:void_onReceive(java.lang.Object):message instanceof JBus.GetMessage && connected => connected
ODL_45:237:void_onReceive(java.lang.Object):messages.size() > 0 => messages.size()
ODL_46:237:void_onReceive(java.lang.Object):messages.size() > 0 => 0
ODL_47:237:void_onReceive(java.lang.Object):message instanceof JBus.GetMessage && connected && messages.size() > 0 => message instanceof JBus.GetMessage && connected
ODL_48:237:void_onReceive(java.lang.Object):message instanceof JBus.GetMessage && connected && messages.size() > 0 => messages.size() > 0
CDL_1:210:void_onReceive(java.lang.Object):message instanceof JBus.Disconnect && connected => connected
CDL_2:214:void_onReceive(java.lang.Object):message instanceof JBus.Subscribe && connected => connected
CDL_3:218:void_onReceive(java.lang.Object):message instanceof JBus.SubscribeCallback && connected => connected
CDL_4:218:void_onReceive(java.lang.Object):callbacks < 10 => callbacks
CDL_5:222:void_onReceive(java.lang.Object):message instanceof JBus.Unsubscribe && connected => connected
CDL_6:222:void_onReceive(java.lang.Object):callbacks > 0 => callbacks
CDL_7:227:void_onReceive(java.lang.Object):message instanceof JBus.UnsubscribeCallback && connected => connected
CDL_8:227:void_onReceive(java.lang.Object):callbacks > 0 => callbacks
CDL_9:231:void_onReceive(java.lang.Object):message instanceof JBus.Publish && connected => connected
CDL_10:232:void_onReceive(java.lang.Object):callbacks > 0 => callbacks
CDL_11:237:void_onReceive(java.lang.Object):message instanceof JBus.GetMessage && connected => connected
CDL_12:237:void_onReceive(java.lang.Object):messages.size() > 0 => messages.size()
